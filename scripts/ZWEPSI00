/*** REXX *************************************************************/
/* ------------------------------------------------------------------ */
/* Licensed Materials - Property of IBM                               */
/* 5650-ZOS                                                           */
/* Copyright IBM Corp. 2016                                           */
/*                                                                    */
/* Status = HSMA224                                                   */
/*                                                                    */
/*--------------------------------------------------------------------*/
/*                                                                    */
/*   THIS SAMPLE PROGRAM IS PROVIDED FOR TUTORIAL PURPOSES ONLY. A    */
/*   COMPLETE HANDLING OF ERROR CONDITIONS HAS NOT BEEN SHOWN OR      */
/*   ATTEMPTED, AND THIS PROGRAM HAS NOT BEEN SUBMITTED TO FORMAL     */
/*   IBM TESTING.  THIS PROGRAM IS DISTRIBUTED ON AN 'AS IS' BASIS    */
/*   WITHOUT ANY WARRANTIES EITHER EXPRESSED OR IMPLIED.              */
/*                                                                    */
/*--------------------------------------------------------------------*/
/*                                                                    */
/*  Exec Name = IZUDXEXP                                              */
/*                                                                    */
/*  DESCRIPTIVE NAME= Sample REXX exec which demonstrates the use     */
/*                    of the z/OSMF Software Management Export        */
/*                    RESTful service.                                */
/*                                                                    */
/*  FUNCTION:                                                         */
/*  This sample demonstrates how the z/OSMF Software Management       */
/*  Export RESTful service can be used to generate JCL that will      */
/*  create a portable software intance.                               */
/*                                                                    */
/*  Using the HTTP REXX Client of the z/OS Web Enablement Toolkit,    */
/*  multiple z/OSMF RESTful services are invoked by this exec to      */
/*  perform an export operation:                                      */
/*                                                                    */
/*  1) The "Add a New Software Instance" RESTful service is used      */
/*     to add a new software instance to the Software Management      */
/*     database.                                                      */
/*  2) The "Load Products and Features" RESTful service is used to    */
/*     load the SMP/E managed products and features that have been    */
/*     installed into your SMP/E target zones.                        */
/*  3) The Software Management Export RESTful service is used to      */
/*     generate JCL that will create a portable software instance.    */
/*  4) The z/OSMF Jobs RESTful service is used to submit the          */
/*     generated JCL and verify the job completes successfully.       */
/*                                                                    */
/*  This exec assumes the software instance resides on, and the       */
/*  generated JCL runs on, the z/OSMF primary system.  Updating this  */
/*  exec to support a software instance that resides on a secondary   */
/*  z/OSMF system is an exercise left for the interested reader.      */
/*                                                                    */
/* INVOCATION:                                                        */
/*    This can run in any non-reentrant REXX environment (e.g., TSO,  */
/*    ISPF, zOS UNIX, SYSTEM REXX) where the z/OS Web Enablement      */
/*    ToolKit is available.                                           */
/*                                                                    */
/*    Syntax:                                                         */
/*            IZUDXEXP -v                                             */
/*    (the optional -v enables verbose trace output for the           */
/*     z/OS Web Enablement Toolkit)                                   */
/*                                                                    */
/* DEPENDENCIES                                                       */
/*    PTF UA83406 on z/OS V2.2 is required which adds REXX support    */
/*    to the z/OS Web Enablement Toolkit.                             */
/*                                                                    */
/*    NOTES:                                                          */
/*    The User Customized Variables section below must be modified    */
/*    to include information on how to connect to your primary        */
/*    z/OSMF system.  In addition, the information to define the      */
/*    software instance (SMP/E global and target zones, and           */
/*    other data sets), and the options for the Export operation must */
/*    be defined.                                                     */
/*                                                                    */
/*    REFERENCES:                                                     */
/*     1. See the z/OS Management Facility Programming Guide          */
/*        (SC27-8420) for more information on the z/OSMF RESTful      */
/*        services used in this sample.                               */
/*     2. See the z/OS MVS Programming: Callable Services for         */
/*        High-Level Languages (SA23-1377) for more information       */
/*        regarding the usage of z/OS HTTP/HTTPS protocol enabler     */
/*        APIs.                                                       */
/*                                                                    */
/* Change Activity:                                                   */
/* -----------------------------------------------------------------  */
/* FLAG REASON  RELEASE       DATE   ORG  DESCRIPTION                 */
/* ---- ------- ----------- -------- ---  --------------------------- */
/* $L0= T132875 HSMA224.SPE 11/08/16 GLT: SWI Export REST support     */
/*                                                                    */
/**********************************************************************/

/************/
/* MAIN     */
/************/

/*********************/
/* Get program args  */
/*********************/
VERBOSE = 0
parse upper arg argString
if GetArgs( argString ) <> 0 then
   exit -1

/* -----------------------------------------------------------------  */
/*      ------  START OF USER CUSTOMIZED VARIABLES  ------            */
/**********************************************************************/
/* The variables included in this section must be modified prior to   */
/* running this sample.                                               */
/* -----------------------------------------------------------------  */
/* The following variables are used to connect to your z/OSMF system  */
/*                                                                    */
/*   ZosmfUri    z/OSMF Server URI                                    */
/*   ZosmfPort   z/OSMF Server Port Number                            */
/*   ZosmfUser   z/OSMF Userid                                        */
/*   ZosmfPw     z/OSMF Password                                      */
/*                                                                    */
/*   SafKeyRing  The SAF keyring that includes the CERTAUTH           */
/*               certificate used by your z/OSMF server.              */
/*               This value is used to connect to your z/OSMF server  */
/*               using an HTTPS connection. The userid that invokes   */
/*               this sample must also be authorized to access this   */
/*               keyring.                                             */
/* -----------------------------------------------------------------  */
ZosmfUri = '#host'
ZosmfPort = '#port'
ZosmfUser = '#userid'
ZosmfPw = '#password'
SafKeyRing = '#safkeyring'
SwiName = '#softwareInstanceName'
SwiSystem = '#sysname'
CSI = '#csi'
zones = '#zones'
exportdir = '#PSIdir'
jcldataset = '#exportDSN' - needs to be allocated
volser='#volser'
/* -----------------------------------------------------------------  */
/* The following variables are used to create a software instance.    */
/* -----------------------------------------------------------------  */
/*  SwiName    Name of the software instance to add.                  */
/*  SwiSystem  Name for the system that has access to the volumes     */
/*             and data sets where the software instance resides.     */
/*             Specify the nickname for the system definition in the  */
/*             z/OSMF Systems task.                                   */
/*                                                                    */
/*             This sample EXEC assumes this system is the primary    */
/*             z/OSMF system.  Using a secondary z/OSMF system is an  */
/*             exercise left for the interested programmer.           */
/*                                                                    */
/*  AddJson   The JSON document that will be sent to the              */
/*            "Add a New Software Instance" RESTful service.          */
/*            This must be updated to define your unique software     */
/*            instance.  See the Software Management Service section  */
/*            in the z/OSMF Management Facility Programming Guide     */
/*            (SC27-8420) for additional information on the content   */
/*            and syntax of this document.                            */
/* -----------------------------------------------------------------  */

AddJson = ,
  '{',
      '"name": "' || SwiName || '",',
      '"system": "' || SwiSystem || '",',
      '"description": "ZOWE Portable Software Instance",',
      '"globalzone": "' || CSI || '",',
      '"targetzones": [ ' || zones || ' ],',
     /* We should later add ZOWE configuration workflow */
  '}'

/* ------------------------------------------------------------------ */
/* The following JSON is used to invoke the Export RESTful service.   */
/* This document should be updated to include the properties to use   */
/* for exporting your software instance. See the Software Management  */
/* Service section in the z/OSMF Management Facility Programming      */
/* Guide (SC27-8420) for additional information on the content and    */
/* syntax of this document.                                           */
/* ------------------------------------------------------------------ */
ExportJson = ,
  '{',
      '"packagedir": "' || exportdir || '" ,',
      '"jcldataset": "' || jcldataset || '",',
      '"jobstatement": [ "//ZWEPSI02 JOB"]',
  '}'

/* ------------------------------------------------------------------ */
/*      ------  END OF USER CUSTOMIZED VARIABLES  ------              */
/* ------------------------------------------------------------------ */

/*********************************************/
/* Get Web Enablement Toolkit REXX constants */
/*********************************************/
 call HTTP_getToolkitConstants
 if RESULT <> 0 then
    exit fatalError( '** Environment error **' )

/***************************/
/* Indicate Program start  */
/***************************/
 say '***************************************************************'
 say '** z/OSMF Software Management Export REST API Sample (Begin) **'
 programRc = 0

/*************************************/
/* Display all user specified values */
/*************************************/
say
say 'User specified values:'
say
say 'ZosmfUri = ' || ZosmfUri
say 'ZosmfUser = ' || ZosmfUser
say 'ZosmfPw = xxxxxxxx'
say 'SafKeyRing = ' || SafKeyRing
say
say 'AddJson = ' || AddJson
say
say 'ExportJson = ' || ExportJson
say

/*****************************************/
/* Initialize request-related variables  */
/*****************************************/
 ConnectionHandle = ''
 RequestHandle = ''

/******************************************/
/* Initialize response-related variables  */
/******************************************/
 ResponseStatusCode = ''
 ResponseReason = ''
 ResponseBody = ''
 ExpectedResponseStatusCode = ''
 ReqCtr = 0

/*******************************/
/* Obtain a connection handle  */
/*******************************/
 call HTTP_init HWTH_HANDLETYPE_CONNECTION
 if RESULT == 0 then do
   /**************************************************************/
   /* Set the necessary options before connecting to the server  */
   /**************************************************************/
   call HTTP_setupConnection
   if RESULT == 0 then do
     /*******************************/
     /* Connect to the HTTP server  */
     /*******************************/
     call HTTP_connect
     if RESULT == 0 then do
       /****************************************************/
       /* Process each request type based on ReqCtr:       */
       /* 1 - Add a new Software Instance                  */
       /* 2 - Load SMP/E Managed Products (async request)  */
       /* 3 - Wait for Load Products to finish             */
       /* 4 - Export the Software Instance (async request) */
       /* 5 - Wait for Export to finish                    */
       /* 6 - Run Export Job (async request)               */
       /* 7 - Wait for Export Job to finish                */
       /****************************************************/
       do while programRc == 0 & ReqCtr <= 8
         /****************************/
         /* Obtain a request handle  */
         /****************************/
         call HTTP_init HWTH_HANDLETYPE_HTTPREQUEST
         if RESULT == 0 then do
           /****************************************************/
           /* Initialize the variables that are used to invoke */
           /* the z/OSMF RESTful service.                      */
           /****************************************************/
           ReqCtr = ReqCtr + 1
           call ZOSMF_initRequest
           /******************************************************/
           /* Set the request options that should be sent to the */
           /* HTTP server.                                       */
           /******************************************************/
           call HTTP_setupRequest
           if RESULT == 0 then do
             /*************************************************/
             /* Send the request.                             */
             /* For asycnhronous requests, sleep and wait for */
             /* it to finish                                  */
             /*************************************************/
             if ZosmfReqType \= 'waitForAsync' then do
               call HTTP_request
               if RESULT == 0 then
                 call ZOSMF_processResponse
               else
                 say "Processing Response Failed"
             end
             else
               Call ZOSMF_waitForAsyncRequest
             programRc = RESULT
             /**************************/
             /* Terminate the request  */
             /**************************/
             call HTTP_terminate RequestHandle, HWTH_NOFORCE
             if RESULT \= 0 then
               programRc = RESULT;
           end /* endif request setup */
           else
             programRc = RESULT;
         end /* endif request handle obtained */
         else
           programRc = RESULT;
       end /* endif do while */
       /******************************/
       /* Disconnect the connection  */
       /******************************/
       call HTTP_disconnect
     end /* endif connection established */
     else
        say "ERROR Connection to the Server Failed"
   end /* endif connection setup */
   else
     say "ERROR Connection Setup Failed"
   /**********************************/
   /* Release the connection handle  */
   /**********************************/
   call HTTP_terminate ConnectionHandle, HWTH_NOFORCE
 end /* endif connection handle obtained */
 else
    say "ERROR Connection Handle failed"
 /*************************/
 /* Indicate Program end  */
 /*************************/
 say '** z/OSMF Software Management Export REST API Sample (End)   **'
 say '***************************************************************'

 exit programRc   /* end main */


/*******************************************************/
/* Function: ZOSMF_initRequest                         */
/*                                                     */
/* Initializes the variables that are needed to invoke */
/* each of the z/OSMF RESTful services.                */
/*                                                     */
/*******************************************************/
ZOSMF_initRequest:

 AsyncType = ''
 AsyncStatus = ''
 RequestBody = ''

 select
   when ReqCtr == 1 then do                                   
     say 'Invoking REST API to delete the software instance ',
     'if previous test did not delete it.'                    
     ZosmfReqType = 'predelete'                               
     RequestMethod = HWTH_HTTP_REQUEST_DELETE                 
     RequestPath = '/zosmf/swmgmt/swi/'SwiSystem'/'SwiName    
     ExpectedResponseStatusCode = 200                         
   end                                                        
   when ReqCtr == 2 then do
     say 'Invoking REST API to add a software instance.'
     ZosmfReqType = 'addSwi'
     RequestMethod = HWTH_HTTP_REQUEST_POST
     RequestPath = '/zosmf/swmgmt/swi'
     RequestBody = AddJson
     ExpectedResponseStatusCode = 200
   end
   when ReqCtr == 3 then do
     say 'Invoking REST API to load SMP/E managed products from the',
       'SMP/E CSI.'
     ZosmfReqType = 'loadProds'
     RequestMethod = HWTH_HTTP_REQUEST_PUT
     RequestPath = '/zosmf/swmgmt/swi/' || SwiSystem || '/' || ,
                   SwiName || '/products'
     ExpectedResponseStatusCode = 202
   end
   when ReqCtr == 4 then do
     say 'Invoking REST API to check if load products has finished.'
     ZosmfReqType = 'waitForAsync'
     AsyncType = 'loadProds'
     RequestMethod = HWTH_HTTP_REQUEST_GET
     RequestPath = StatusUrlPath
     ExpectedResponseStatusCode = 200
   end
   when ReqCtr == 5 then do
     say 'Invoking REST API to export the software instance.'
     ZosmfReqType = 'export'
     RequestMethod = HWTH_HTTP_REQUEST_POST
     RequestPath = '/zosmf/swmgmt/swi/' || SwiSystem || '/' || ,
                   SwiName || '/export'
     RequestBody = ExportJson
     ExpectedResponseStatusCode = 202
   end
   when ReqCtr == 6 then do
     say 'Invoking REST API to check if export has finished.'
     ZosmfReqType = 'waitForAsync'
     AsyncType = 'export'
     RequestMethod = HWTH_HTTP_REQUEST_GET
     RequestPath = StatusUrlPath
     ExpectedResponseStatusCode = 200
   end
   when ReqCtr == 7 then do
     say 'Invoking REST API to run the export job for the software',
         'instance.'
     ZosmfReqType = 'runExportJob'
     RequestMethod = HWTH_HTTP_REQUEST_PUT
     RequestPath = '/zosmf/restjobs/jobs'
     RequestBody = '{"file": "//' || "'" || ExportJcl || "'" || '"}'
     ExpectedResponseStatusCode = 201
   end
   when ReqCtr == 8 then do
     say 'Invoking REST API to check if export job ' || expJobName,
         || ' ' || expJobId || ' has finished.'
     ZosmfReqType = 'waitForAsync'
     AsyncType = 'runExportJob'
     RequestMethod = HWTH_HTTP_REQUEST_GET
     RequestPath = StatusUrlPath
     ExpectedResponseStatusCode = 200
   end
   when ReqCtr == 9 then do
     say 'Invoking REST API to delete the software instance.'
     ZosmfReqType = 'delete'
     RequestMethod = HWTH_HTTP_REQUEST_DELETE
     RequestPath = '/zosmf/swmgmt/swi/' || SwiSystem || '/' || ,
                SwiName ||
     ExpectedResponseStatusCode = 200
   end
   otherwise nop
 end
 return 0

/*******************************************************/
/* Function: ZOSMF_processResponse                     */
/*                                                     */
/* Verifies the correct response is recieved from a    */
/* z/OSMF RESTful service. Also saves any information  */
/* in the response which is needed to process the next */
/* request.                                            */
/*                                                     */
/*******************************************************/
ZOSMF_processResponse:

 /****************************************************************/
 /* Check if the expect HTTP response code was returned.         */
 /* If so, process any data returned.                            */
 /****************************************************************/
 if ResponseStatusCode == ExpectedResponseStatusCode then do
   select
     when ZosmfReqType == 'loadProds' | ZosmfReqType = 'export' then do
       StatusUrl = getJsonValue(ResponseBody, 'statusurl')
       path = stripBackSlash(statusurl)
       parse var path '//' . '/' StatusUrlPath
       StatusUrlPath = '/' || StatusUrlPath
     end
     when ZosmfReqType == 'runExportJob' then do
       expjobid = getJsonValue(ResponseBody, 'jobid')
       expjobname = getJsonValue(ResponseBody, 'jobname')
       StatusUrlPath = '/zosmf/restjobs/jobs/' || expjobname ||,
                       '/' || expjobid
     end
     when ZosmfReqType == 'waitForAsync' then do
       if AsyncType == 'loadProds' | AsyncType = 'export' then do
         AsyncStatus = getJsonValue(ResponseBody, 'status')
         if AsyncStatus == 'complete' & AsyncType = 'export' then
           ExportJcl = getJsonValue(ResponseBody, 'jcl')
       end
       else if AsyncType == 'runExportJob' then do
         JobStatus = getJsonValue(ResponseBody, 'status')
         if JobStatus == 'INPUT' | JobStatus == 'ACTIVE' then
           AsyncStatus = 'running'
         else do
           AsyncStatus = 'complete'
           ZosmfReqType = ''
           retcode = getJsonValue(ResponseBody, 'retcode')
           select
             when word(retcode,1) = 'CC' then
               Say 'Export job '|| expjobName || ' ' || expJobId || ,
                    ' completed successfully.'
             when retcode = 'CANCELED' then
               Say 'Export job '|| expjobName || ' ' || expJobId || ,
                   ' was cancelled.'
             otherwise do
               Say 'Export job '|| expjobName || ' ' || expJobId || ,
                   ' ended with an error. See response below.'
               Say
               Say 'Response: ' || ResponseBody
               Say
             end
           end
         end
       end
     end
     otherwise nop
   end
 end
 else if ZosmfReqType == 'predelete' & ResponseStatusCode == 404 then
    say 'Software instance was already deleted'                
 /****************************************************************/
 /* Display the HTTP reason and status code returned when they   */
 /* are not the expected values.                                 */
 /****************************************************************/
 else do
   Say 'The z/OSMF server did not respond with the expected HTTP',
       'status code.'
   Say 'Expected: ' || ExpectedResponseStatusCode
   Say 'Received: ' || ResponseStatusCode
   Say 'Reason Code: ' || HttpReasonCode
   Say 'Response: ' || ResponseBody
   return -1
 end
 return 0


/*******************************************************/
/* Function: ZOSMF_waitForAsyncRequest                 */
/*                                                     */
/* Waits for a z/OSMF asychronous RESTful service      */
/* request to finish.                                  */
/*                                                     */
/* Returns: 0 if successful, -1 if not                 */
/*******************************************************/
ZOSMF_waitForAsyncRequest:

 /**********************************************************/
 /* Loop until the async request is finshed or the maximum */
 /* wait time has expired (5 minutes).                     */
 /**********************************************************/
 sleepSecs = 0
 do while ZosmfReqType == 'waitForAsync' & AsyncStatus \= 'complete' & ,
          RESULT == 0

   if (sleepSecs + 10 <= 300) then do
     select
       when AsyncType == 'loadProds' then
         Say 'Waiting for load products to finish.',
             'Sleeping for 10 seconds.'
       when AsyncType == 'export' then
         Say 'Waiting for export to finish.',
             'Sleeping for 10 seconds.'
       when AsyncType == 'runExportJob' then
         Say 'Waiting for export job to finish.',
             'Sleeping for 10 seconds.'
       otherwise nop
     end

     /*****************************************/
     /* Wait for async request to finish      */
     /* Sleep for 10 seconds before retrying. */
     /*****************************************/
     ADDRESS SYSCALL
     "SLEEP 10"            /* Sleep for 10 seconds */

     call HTTP_request
     if RESULT == 0 then
       call ZOSMF_processResponse
     else
       say "Processing Response Failed"
     sleepSecs = sleepSecs + 10
   end

   /*********************************/
   /* Maximum wait time has expired */
   /*********************************/
   else do
     Say 'Async request did not complete before the',
         'maximum sleep time expired (5 minutes). ',
     return -1
   end
 end /* endif do while */
 return 0


/**************************************************/
/* Function:  getJsonValue                        */
/*                                                */
/* Returns the value for a JSON tag               */
/*                                                */
/**************************************************/
getJsonValue:
 jsondoc = arg(1)
 tagname = arg(2)
 jsontag = '"' || tagname || '"'
 parse var jsondoc (jsontag) ':' '"' value '"' .
 return value


/*****************************************************/
/* Function:  stripBackSlash                         */
/*                                                   */
/* Strips any back slash chars from the input string */
/*                                                   */
/*****************************************************/
stripBackSlash:
 parse arg str
 i = POS('\',str)          /* Find the first back slash */
 do while i > 0
   str = DELSTR(str,i,1)   /* Remove the back slash      */
   p = i+1                 /* Point at the next char     */
   i = POS('\',str,p)      /* Find the next back slash   */
 end
 return str


/***********************************************/
/* Function: usage                             */
/*                                             */
/* Provide usage guidance to the invoker.      */
/*                                             */
/* Returns: -1 to indicate fatal script error. */
/***********************************************/
usage:
 whyString = arg(1)
 say
 say 'usage:'
 say 'ex IZUDXEXP <optional -V for verbose>'
 say
 say '('||whyString||')'
 say
 return -1


/***********************************************/
/* Function:  GetArgs                          */
/*                                             */
/* Parse script arguments and make appropriate */
/* variable assignments, or return fatal error */
/* code via usage() invocation.                */
/*                                             */
/* Returns: 0 if successful, -1 if not.        */
/***********************************************/
GetArgs:
 arg = arg(1)
 argCount = words(S)
 if argCount > 1 then
   return usage( 'Wrong number of arguments' )
 if arg == '-V' then
   VERBOSE = 1
return 0


/**********************************************************************/
/*            HTTP-related functions                                  */
/*                                                                    */
/* These { HTTP_xxx } functions are located together                  */
/* for ease of reference and are used to send an                      */
/* HTTP request using the Web Enablement Toolkit.                     */
/*                                                                    */
/* Sample flow for using the HTTP Client in the z/OS Web Enablement   */
/* Toolkit.                                                           */
/*                                                                    */
/*    Call HTTP_init to create a connection instance.                 */
/*    Call HTTP_setupConnection to set all the necessary connection   */
/*      options prior to connecting to the web server.                */
/*    Call HTTP_connect to connect to the web server.                 */
/*    Call HTTP_init to create a request instance.                    */
/*    Call HTTP_setupRequest to set the necessary request options.    */
/*    Call HTTP_request to send the request over the established      */
/*      connection.                                                   */
/*      * Variable ResponseBody holds any response body content       */
/*        received from the HTTP server.                              */
/*      * Variables ResponseStatusCode and ResponseReasonCode hold    */
/*        the status code and reason received from the HTTP server.   */
/*    Call HTTP_terminate to terminate the request instance.          */
/*    Call HTTP_disconnect to disconnect the connection (socket)      */
/*      from the web server.                                          */
/*    Call HTTP_terminate to terminate the connection instance.       */
/**********************************************************************/

/*******************************************************/
/* Function:  HTTP_getToolkitConstants                 */
/*                                                     */
/* Access constants used by the toolkit (for return    */
/* codes, etc), via the HWTCONST toolkit api.          */
/*                                                     */
/* Returns: 0 if toolkit constants accessed, -1 if not */
/*******************************************************/
HTTP_getToolkitConstants:
 /***********************************************/
 /* Ensure that the toolkit host command is     */
 /* available in your REXX environment (no harm */
 /* done if already present).  Do this before   */
 /* your first toolkit api invocation.  Also,   */
 /* ensure no conflicting signal-handling in    */
 /* cases of running in USS environments.       */
 /***********************************************/
 if VERBOSE then
   say 'Setting hwtcalls on, syscalls sigoff'
 call hwtcalls 'on'
 call syscalls 'SIGOFF'
 /************************************************/
 /* Call the HWTCONST toolkit api.  This should  */
 /* make all toolkit-related constants available */
 /* to procedures via (expose of) HWT_CONSTANTS  */
 /************************************************/
 if VERBOSE then
   say 'Including HWT Constants...'
 address hwthttp "hwtconst ",
                 "ReturnCode ",
                 "DiagArea."
 RexxRC = RC
 if HTTP_isError(RexxRC,ReturnCode) then do
   call HTTP_surfaceDiag 'hwtconst', RexxRC, ReturnCode, DiagArea.
   return fatalError( '** hwtconst (hwthttp) failure **' )
 end /* endif hwtconst failure */
 return 0  /* end function */


/*************************************************/
/* Function: HTTP_init                           */
/*                                               */
/* Create a handle of the designated type, via   */
/* the HWTHINIT toolkit api.  Populate the       */
/* corresponding global variable with the result */
/*                                               */
/* Returns: 0 if successful, -1 if not           */
/*************************************************/
HTTP_init:
 HandleType = arg(1)
 /***********************************/
 /* Call the HWTHINIT toolkit api.  */
 /***********************************/
 ReturnCode = -1
 DiagArea. = ''
 address hwthttp "hwthinit ",
                 "ReturnCode ",
                 "HandleType ",
                 "HandleOut ",
                 "DiagArea."
 RexxRC = RC
 if HTTP_isError(RexxRC,ReturnCode) then do
   call HTTP_surfaceDiag 'hwthinit', RexxRC, ReturnCode, DiagArea.
   return fatalError( '** hwthinit failure **' )
 end
 if HandleType == HWTH_HANDLETYPE_CONNECTION then
   ConnectionHandle = HandleOut
 else
   RequestHandle = HandleOut
 return 0  /* end Function */


/****************************************************/
/* Function: HTTP_setupConnection                   */
/*                                                  */
/* Sets the necessary connection options, via the   */
/* HWTHSET toolkit api.  The global variable        */
/* ConnectionHandle orients the api as to the scope */
/* of the option(s).                                */
/*                                                  */
/* Returns: 0 if successful, -1 if not              */
/****************************************************/
HTTP_setupConnection:
 if VERBOSE then do
   /*****************************************************************/
   /* Set the HWT_OPT_VERBOSE option, if appropriate.               */
   /* This option is handy when developing an application (but may  */
   /* be undesirable once development is complete).  Inner workings */
   /* of the toolkit are traced by messages written to standard     */
   /* output, or optionally redirected to file (by use of the       */
   /* HWTH_OPT_VERBOSE_OUTPUT option, not shown here).              */
   /*****************************************************************/
   say '**** Set HWTH_OPT_VERBOSE for connection ****'
   ReturnCode = -1
   DiagArea. = ''
   address hwthttp "hwthset ",
                   "ReturnCode ",
                   "ConnectionHandle ",
                   "HWTH_OPT_VERBOSE ",
                   "HWTH_VERBOSE_ON ",
                   "DiagArea."
   RexxRC = RC
   if HTTP_isError(RexxRC,ReturnCode) then do
     call HTTP_surfaceDiag 'hwthset', RexxRC, ReturnCode, DiagArea.
     return fatalError( '** hwthset (HWTH_OPT_VERBOSE) failure **' )
   end /* endif hwthset failure */
/******************************************************/
/* Set the DD where VERBOSE output should be written. */
/* This is only needed to write VERBOSE output to a   */
/* file or data set.                                  */
/******************************************************/
/* ReturnCode = -1
   DiagArea. = ''
   address hwthttp "hwthset ",
                   "ReturnCode ",
                   "ConnectionHandle ",
                   "HWTH_OPT_VERBOSE_OUTPUT ",
                   "HWTHDD ",
                   "DiagArea."
   RexxRC = RC
   if HTTP_isError(RexxRC,ReturnCode) then do
     call HTTP_surfaceDiag 'hwthset', RexxRC, ReturnCode, DiagArea.
     return fatalError( '** hwthset (HWTH_OPT_VERBOSE) failure **' )
   end /* endif hwthset failure */ */
 end /* endif script invocation requested (-V) VERBOSE */
 /*********************************************************************/
 /* Set URI for connection to the z/OSMF server                       */
 /*********************************************************************/
 if VERBOSE then
   say '****** Set HWTH_OPT_URI for connection to ' || ZosmfUri || ,
       '******'
 ReturnCode = -1
 DiagArea. = ''
 address hwthttp "hwthset ",
                 "ReturnCode ",
                 "ConnectionHandle ",
                 "HWTH_OPT_URI ",
                 "ZosmfUri ",
                 "DiagArea."
 RexxRC = RC
 if HTTP_isError(RexxRC,ReturnCode) then do
   call HTTP_surfaceDiag 'hwthset', RexxRC, ReturnCode, DiagArea.
   return fatalError( '** hwthset (HWTH_OPT_URI) failure **' )
 end  /* endif hwthset failure */
 /*********************************************************************/
 /* Set the HWTH_OPT_PORT option for connection to the z/OSMF server  */
 /*********************************************************************/
 if VERBOSE then
   say '****** Set HWTH_OPT_PORT for connection to ' || ZosmfPort || ,
       '******'
 ReturnCode = -1
 DiagArea. = ''
 address hwthttp "hwthset ",
                 "ReturnCode ",
                 "ConnectionHandle ",
                 "HWTH_OPT_PORT ",
                 "ZosmfPort ",
                 "DiagArea."
 RexxRC = RC
 if HTTP_isError(RexxRC,ReturnCode) then do
   call HTTP_surfaceDiag 'hwthset', RexxRC, ReturnCode, DiagArea.
   return fatalError( '** hwthset (HWTH_OPT_PORT) failure **' )
 end  /* endif hwthset failure */
 /*********************************************************************/
 /* Set the HWTH_OPT_USE_SSL option to use a SSL connection           */
 /*********************************************************************/
 if VERBOSE then
   say '****** Set HWTH_OPT_USE_SSL to use a SSL connection ******'
 ReturnCode = -1
 DiagArea. = ''
 address hwthttp "hwthset ",
                 "ReturnCode ",
                 "ConnectionHandle ",
                 "HWTH_OPT_USE_SSL ",
                 "HWTH_SSL_USE ",
                 "DiagArea."
 RexxRC = RC
 if HTTP_isError(RexxRC,ReturnCode) then do
   call HTTP_surfaceDiag 'hwthset', RexxRC, ReturnCode, DiagArea.
   return fatalError( '** hwthset (HWTH_OPT_USE_SSL) failure **' )
 end  /* endif hwthset failure */
 /*********************************************************************/
 /* Set the HWTH_OPT_SSLKEYTYPE option for a SAF Keyring              */
 /*********************************************************************/
 if VERBOSE then
   say '****** Set HWTH_OPT_SSLKEYTYPE to use a SAF Keyring ******'
 ReturnCode = -1
 DiagArea. = ''
 address hwthttp "hwthset ",
                 "ReturnCode ",
                 "ConnectionHandle ",
                 "HWTH_OPT_SSLKEYTYPE ",
                 "HWTH_SSLKEYTYPE_KEYRINGNAME ",
                 "DiagArea."
 RexxRC = RC
 if HTTP_isError(RexxRC,ReturnCode) then do
   call HTTP_surfaceDiag 'hwthset', RexxRC, ReturnCode, DiagArea.
   return fatalError( '** hwthset (HWTH_OPT_SSLKEYTYPE) failure **' )
 end  /* endif hwthset failure */
 /*********************************************************************/
 /* Set the HWTH_OPT_SSLKEY option to the SAF Keyring name            */
 /*********************************************************************/
 if VERBOSE then
   say '****** Set HWTH_OPT_SSLKEY to SAF Keyring '|| SafKeyRing ,
       '******'
 ReturnCode = -1
 DiagArea. = ''
 address hwthttp "hwthset ",
                 "ReturnCode ",
                 "ConnectionHandle ",
                 "HWTH_OPT_SSLKEY ",
                 "SafKeyRing ",
                 "DiagArea."
 RexxRC = RC
 if HTTP_isError(RexxRC,ReturnCode) then do
   call HTTP_surfaceDiag 'hwthset', RexxRC, ReturnCode, DiagArea.
   return fatalError( '** hwthset (HWTH_OPT_SSLKEY) failure **' )
 end  /* endif hwthset failure */
 /*********************************************************************/
 /* Set HWTH_OPT_COOKIETYPE                                           */
 /*   Enable the cookie engine for this connection.  Any "eligible"   */
 /*   stored cookies will be resent to the host on subsequent         */
 /*   interactions automatically.                                     */
 /*********************************************************************/
 if VERBOSE then
   say '****** Set HWTH_OPT_COOKIETYPE for session cookies ******'
 ReturnCode = -1
 DiagArea. = ''
 address hwthttp "hwthset ",
                 "ReturnCode ",
                 "ConnectionHandle ",
                 "HWTH_OPT_COOKIETYPE ",
                 "HWTH_COOKIETYPE_SESSION ",
                 "DiagArea."
 RexxRC = RC
 if HTTP_isError(RexxRC,ReturnCode) then do
   call HTTP_surfaceDiag 'hwthset', RexxRC, ReturnCode, DiagArea.
   return fatalError( '** hwthset (HWTH_OPT_COOKIETYPE) failure **' )
 end  /* endif hwthset failure */
 if VERBOSE then
   say 'Connection setup successful'
 return 0  /* end subroutine */


/*************************************************************/
/* Function: HTTP_connect                                    */
/*                                                           */
/* Connect to the configured domain (host) via the HWTHCONN  */
/* toolkit api.                                              */
/*                                                           */
/* Returns: 0 if successful, -1 if not                       */
/*************************************************************/
HTTP_connect:
 if VERBOSE then
   say 'Connect'
 /**********************************/
 /* Call the HWTHCONN toolkit api  */
 /**********************************/
 ReturnCode = -1
 DiagArea. = ''
 address hwthttp "hwthconn ",
                 "ReturnCode ",
                 "ConnectionHandle ",
                 "DiagArea."
 RexxRC = RC
 if HTTP_isError(RexxRC,ReturnCode) then do
   call HTTP_surfaceDiag 'hwthconn', RexxRC, ReturnCode, DiagArea.
   return fatalError( '** hwthconn failure **' )
 end
 if VERBOSE then
   say 'Connect (hwthconn) successful'
 return 0  /* end function */


/************************************************************/
/* Function: HTTP_setupRequest                              */
/*                                                          */
/* Sets the necessary request options.  The global variable */
/* RequestHandle orients the api as to the scope of the     */
/* option(s).                                               */
/*                                                          */
/* Returns: 0 if successful, -1 if not                      */
/************************************************************/
HTTP_setupRequest:
 if VERBOSE then
   say '** Set HWTH_OPT_REQUESTMETHOD for request **'
 /**************************************************************/
 /* Set HTTP Request method.                                   */
 /**************************************************************/
 ReturnCode = -1
 DiagArea. = ''
 address hwthttp "hwthset ",
                 "ReturnCode ",
                 "RequestHandle ",
                 "HWTH_OPT_REQUESTMETHOD ",
                 "RequestMethod ",
                 "DiagArea."
 RexxRC = RC
 if HTTP_isError(RexxRC,ReturnCode) then do
   call HTTP_surfaceDiag 'hwthset', RexxRC, ReturnCode, DiagArea.
   return fatalError 'hwthset (HWTH_OPT_REQUESTMETHOD) failure **' )
 end  /* endif hwthset failure */
 /**************************************************************/
 /* Check if a request body should be sent.                    */
 /**************************************************************/
 if (RequestMethod == HWTH_HTTP_REQUEST_POST | ,
     RequestMethod == HWTH_HTTP_REQUEST_PUT) & RequestBody \= '' then do
   /**************************************************************/
   /* Set the request body                                       */
   /**************************************************************/
   ReturnCode = -1
   DiagArea. = ''
   address hwthttp "hwthset ",
                   "ReturnCode ",
                   "RequestHandle ",
                   "HWTH_OPT_REQUESTBODY ",
                   "RequestBody ",
                   "DiagArea."
   RexxRC = RC
   if HTTP_isError(RexxRC,ReturnCode) then do
     call HTTP_surfaceDiag 'hwthset', RexxRC, ReturnCode, DiagArea.
     return fatalError 'hwthset (HWTH_OPT_REQUESTMETHOD) failure **' )
   end  /* endif hwthset failure */
   /******************************************************************/
   /* Have the toolkit convert the request body from ASCII to EBCDIC */
   /******************************************************************/
   ReturnCode = -1
   DiagArea. = ''
   if VERBOSE then
     say 'Set HWTH_OPT_TRANSLATE_RESPBODY for request'
   address hwthttp "hwthset ",
                   "ReturnCode ",
                   "RequestHandle ",
                   "HWTH_OPT_TRANSLATE_REQBODY ",
                   "HWTH_XLATE_REQBODY_E2A ",
                   "DiagArea."
   RexxRC = RC
   if HTTP_isError(RexxRC,ReturnCode) then do
     call HTTP_surfaceDiag 'hwthset', RexxRC, ReturnCode, DiagArea.
     return fatalError( '** hwthset (HWTH_OPT_TRANSLATE_RESPBODY) ',
                           'failure **' )
   end /* endif hwthset failure */
 end  /* RequestBody specified */
 /*****************************************************************/
 /* Set the request URI                                           */
 /*  Set the URN URI that identifies a resource by name that is   */
 /*    the target of our request.                                 */
 /*****************************************************************/
 if VERBOSE then
   say'****** Set HWTH_OPT_URI for request ******'
 ReturnCode = -1
 DiagArea. = ''
 address hwthttp "hwthset ",
                 "ReturnCode ",
                 "RequestHandle ",
                 "HWTH_OPT_URI ",
                 "RequestPath ",
                 "DiagArea."
 RexxRC = RC
 if HTTP_isError(RexxRC,ReturnCode) then do
   call HTTP_surfaceDiag 'hwthset', RexxRC, ReturnCode, DiagArea.
   return fatalError( '** hwthset (HWTH_OPT_URI) failure **' )
 end  /* endif hwthset failure */
 /*********************************************************************/
 /* Set HWTH_OPT_HTTPAUTH to use basic authentication                 */
 /*********************************************************************/
 if VERBOSE then
   say '****** Set HWTH_OPT_HTTPAUTH for connection ******'
 ReturnCode = -1
 DiagArea. = ''
 address hwthttp "hwthset ",
                 "ReturnCode ",
                 "RequestHandle ",
                 "HWTH_OPT_HTTPAUTH ",
                 "HWTH_HTTPAUTH_BASIC ",
                 "DiagArea."
 RexxRC = RC
 if HTTP_isError(RexxRC,ReturnCode) then do
   call HTTP_surfaceDiag 'hwthset', RexxRC, ReturnCode, DiagArea.
   return fatalError( '** hwthset (HWTH_OPT_HTTPAUTH) failure **' )
 end  /* endif hwthset failure */
 /*********************************************************************/
 /* Set HWTH_OPT_USERNAME to the z/OSMF userid                        */
 /*********************************************************************/
 if VERBOSE then
   say '****** Set HWTH_OPT_USERNAME for connection ******'
 ReturnCode = -1
 DiagArea. = ''
 address hwthttp "hwthset ",
                 "ReturnCode ",
                 "RequestHandle ",
                 "HWTH_OPT_USERNAME ",
                 "ZosmfUser ",
                 "DiagArea."
 RexxRC = RC
 if HTTP_isError(RexxRC,ReturnCode) then do
   call HTTP_surfaceDiag 'hwthset', RexxRC, ReturnCode, DiagArea.
   return fatalError( '** hwthset (HWTH_OPT_USERNAME) failure **' )
 end  /* endif hwthset failure */
 /*********************************************************************/
 /* Set HWTH_OPT_PASSWORD to the z/OSMF user's password.              */
 /*********************************************************************/
 if VERBOSE then
   say '****** Set HWTH_OPT_PASSWORD for connection ******'
 ReturnCode = -1
 DiagArea. = ''
 address hwthttp "hwthset ",
                 "ReturnCode ",
                 "RequestHandle ",
                 "HWTH_OPT_PASSWORD ",
                 "ZosmfPw ",
                 "DiagArea."
 RexxRC = RC
 if HTTP_isError(RexxRC,ReturnCode) then do
   call HTTP_surfaceDiag 'hwthset', RexxRC, ReturnCode, DiagArea.
   return fatalError( '** hwthset (HWTH_OPT_PASSWORD) failure **' )
 end  /* endif hwthset failure */
 /*********************************************************************/
 /* Have the toolkit convert the response body from ASCII to EBCDIC   */
 /* (so that we may pass it to our parser in a form that the latter   */
 /* will understand)                                                  */
 /*********************************************************************/
 ReturnCode = -1
 DiagArea. = ''
 if VERBOSE then
   say 'Set HWTH_OPT_TRANSLATE_RESPBODY for request'
 address hwthttp "hwthset ",
                 "ReturnCode ",
                 "RequestHandle ",
                 "HWTH_OPT_TRANSLATE_RESPBODY ",
                 "HWTH_XLATE_RESPBODY_A2E ",
                 "DiagArea."
 RexxRC = RC
 if HTTP_isError(RexxRC,ReturnCode) then do
   call HTTP_surfaceDiag 'hwthset', RexxRC, ReturnCode, DiagArea.
   return fatalError( ,
     '** hwthset (HWTH_OPT_TRANSLATE_RESPBODY) failure  **' )
 end /* endif hwthset failure */
 /*************************************************/
 /* Set the variable for receiving response body  */
 /**************************************************/
 ReturnCode = -1
 DiagArea. = ''
 if VERBOSE then
   say 'Set HWTH_OPT_RESPONSEBODY_USERDATA for request'
 address hwthttp "hwthset ",
                 "ReturnCode ",
                 "RequestHandle ",
                 "HWTH_OPT_RESPONSEBODY_USERDATA ",
                 "ResponseBody ",
                 "DiagArea."
 RexxRC = RC
 if HTTP_isError(RexxRC,ReturnCode) then do
   call HTTP_surfaceDiag 'hwthset', RexxRC, ReturnCode, DiagArea.
   return fatalError( ,
     '** hwthset (HWTH_OPT_RESPONSEBODY_USERDATA) failure **')
 end /* endif hwthset failure */
 /*************************************************************/
 /* Set any request header(s) we may have.  This depends upon */
 /* the Http request (often we might not have any).           */
 /*************************************************************/
 call HTTP_setRequestHeaders
 if RESULT <> 0 then
   return fatalError( '** Unable to set Request Headers **' )
 if VERBOSE then
   say 'Request setup successful'
 return 0   /* end function */


/****************************************************************/
/* Function: HTTP_request                                       */
/*                                                              */
/* Make the configured Http request via the HWTHRQST toolkit    */
/* api.                                                         */
/*                                                              */
/* Returns: 0 if successful, -1 if not                          */
/****************************************************************/
HTTP_request:
 ReturnCode = -1
 DiagArea. = ''
 /***********************************/
 /* Call the HWTHRQST toolkit api.  */
 /***********************************/
 address hwthttp "hwthrqst ",
                 "ReturnCode ",
                 "ConnectionHandle ",
                 "RequestHandle ",
                 "HttpStatusCode ",
                 "HttpReasonCode ",
                 "DiagArea."
 RexxRC = RC
 if HTTP_isError(RexxRC,ReturnCode) then do
   call HTTP_surfaceDiag 'hwthrqst', RexxRC, ReturnCode, DiagArea.
   return fatalError( '** hwthrqst failure **' )
 end  /* endif hwthrqst failure */
 /****************************************************************/
 /* The ReturnCode indicates merely whether the request was made */
 /* (and response received) without error.  The origin server's  */
 /* response, of course, is another matter.  The HttpStatusCode  */
 /* and HttpReasonCode record how the server responded.  Any     */
 /* header(s) and/or body included in that response are to be    */
 /* found in the variables which we established earlier.         */
 /****************************************************************/
 ResponseStatusCode = strip(HttpStatusCode,'L',0)
 ResponseReasonCode = strip(HttpReasonCode)
 return 0  /* end function */


/*************************************************************/
/* Function:  HTTP_setRequestHeaders                         */
/*                                                           */
/* Add appropriate Request Headers, by first building an     */
/* "SList", and then setting the HWTH_OPT_HTTPHEADERS        */
/* option of the Request with that list.                     */
/*                                                           */
/* Returns: 0 if successful, -1 if not                       */
/*************************************************************/
HTTP_setRequestHeaders:
 SList = ''
 acceptJsonHeader = 'Accept:application/json'
 acceptLanguageHeader = 'Accept-Language: en-US'
 contentTypeHeader = 'Content-Type: application/json'
 crossSiteHeader = 'X-CSRF-ZOSMF-HEADER:*'
 /*********************************************************************/
 /* Create a brand new SList and specify the first header to be an    */
 /* "Accept" header that requests that the server return any response */
 /* body text in JSON format.                                         */
 /*********************************************************************/
 ReturnCode = -1
 DiagArea. = ''
 if VERBOSE then
   say 'Create new SList'
 address hwthttp "hwthslst ",
                 "ReturnCode ",
                 "RequestHandle ",
                 "HWTH_SLST_NEW ",
                 "SList ",
                 "acceptJsonHeader ",
                 "DiagArea."
 RexxRC = RC
 if HTTP_isError(RexxRC,ReturnCode) then do
   call HTTP_surfaceDiag 'hwthslst', RexxRC, ReturnCode, DiagArea.
   return fatalError( '** hwthslst (HWTH_SLST_NEW) failure **' )
 end  /* endif hwthslst failure */
 /***********************************************************/
 /* Append the Accept-Language request header to the SList  */
 /* to infer to the server the regional settings which are  */
 /* preferred by this application.                          */
 /***********************************************************/
 if VERBOSE then
   say 'Append to SList'
 address hwthttp "hwthslst ",
                 "ReturnCode ",
                 "RequestHandle ",
                 "HWTH_SLST_APPEND ",
                 "SList ",
                 "acceptLanguageHeader ",
                 "DiagArea."
 RexxRC = RC
 if HTTP_isError(RexxRC,ReturnCode) then do
   call HTTP_surfaceDiag 'hwthslst', RexxRC, ReturnCode, DiagArea.
   return fatalError( '** hwthslst (HWTH_SLST_APPEND) failure **' )
 end /* endif hwthslst failure */
 /*************************************************************/
 /* Append the Content-Type request header to the SList       */
 /* which is used when data is sent using a HTTP POST or PUT. */
 /* preferred by this application.                            */
 /*************************************************************/
 if VERBOSE then
   say 'Append to SList'
 address hwthttp "hwthslst ",
                 "ReturnCode ",
                 "RequestHandle ",
                 "HWTH_SLST_APPEND ",
                 "SList ",
                 "contentTypeHeader ",
                 "DiagArea."
 RexxRC = RC
 if HTTP_isError(RexxRC,ReturnCode) then do
   call HTTP_surfaceDiag 'hwthslst', RexxRC, ReturnCode, DiagArea.
   return fatalError( '** hwthslst (HWTH_SLST_APPEND) failure **' )
 end /* endif hwthslst failure */
 /***********************************************************/
 /* Append the Cross-Site header to the SList to enable REST*/
 /* API calls that are not called within the z/OSMF.        */
 /***********************************************************/
 if VERBOSE then
   say 'Append to SList'
 address hwthttp "hwthslst ",
                 "ReturnCode ",
                 "RequestHandle ",
                 "HWTH_SLST_APPEND ",
                 "SList ",
                 "crossSiteHeader ",
                 "DiagArea."
 RexxRC = RC
 if HTTP_isError(RexxRC,ReturnCode) then do
   call HTTP_surfaceDiag 'hwthslst', RexxRC, ReturnCode, DiagArea.
   return fatalError( '** hwthslst (HWTH_SLST_APPEND) failure **' )
 end /* endif hwthslst failure */
 /************************************/
 /* Set the request headers with the */
 /* just-produced list               */
 /************************************/
 if VERBOSE then
   say 'Set HWTH_OPT_HTTPHEADERS for request'
 ReturnCode = -1
 DiagArea. = ''
 address hwthttp "hwthset ",
                 "ReturnCode ",
                 "RequestHandle ",
                 "HWTH_OPT_HTTPHEADERS ",
                 "SList ",
                 "DiagArea."
 RexxRC = RC
 if HTTP_isError(RexxRC,ReturnCode) then do
   call HTTP_surfaceDiag 'hwthset', RexxRC, ReturnCode, DiagArea.
   return fatalError( '** hwthset (HWTH_OPT_HTTPHEADERS) failure **' )
 end  /* endif hwthset failure */
 return 0  /* end function */


/****************************************************************/
/* Function: HTTP_disconnect                                    */
/*                                                              */
/* Disconnect from the configured domain (host) via the         */
/* HWTHDISC toolkit api.                                        */
/*                                                              */
/* Returns: 0 if successful, -1 if not                          */
/****************************************************************/
HTTP_disconnect:
 if VERBOSE then
   say 'Disconnect'
 /***********************************/
 /* Call the HWTHDISC toolkit api.  */
 /***********************************/
 ReturnCode = -1
 DiagArea. = ''
 address hwthttp "hwthdisc ",
                 "ReturnCode ",
                 "ConnectionHandle ",
                 "DiagArea."
 RexxRC = RC
 if HTTP_isError(RexxRC,ReturnCode) then do
   call HTTP_surfaceDiag 'hwthdisc', RexxRC, ReturnCode, DiagArea.
   return fatalError( '** hwthdisc failure **' )
 end /* endif hwthdisc failure */
 if VERBOSE then
   say 'Disconnect (hwthdisc) succeeded'
 return 0  /* end function */


/****************************************************************/
/* Function: HTTP_terminate                                     */
/*                                                              */
/* Release the designated Connection or Request handle via the  */
/* HWTHTERM toolkit api.                                        */
/*                                                              */
/* Returns:                                                     */
/* 0 if successful, -1 if not                                   */
/****************************************************************/
HTTP_terminate:

 handleIn = arg(1)
 forceOption = arg(2)
 if VERBOSE then
   say 'Terminate'
 /***********************************/
 /* Call the HWTHTERM toolkit api.  */
 /***********************************/
 ReturnCode = -1
 DiagArea. = ''
 address hwthttp "hwthterm ",
                 "ReturnCode ",
                 "handleIn ",
                 "forceOption ",
                 "DiagArea."
 RexxRC = RC
 if HTTP_isError(RexxRC,ReturnCode) then do
   call HTTP_surfaceDiag 'hwthterm', RexxRC, ReturnCode, DiagArea.
   return fatalError( '** hwthterm failure **' )
 end  /* endif hwthterm failure */
 if VERBOSE then
   say 'Terminate (hwthterm) succeeded'
 return 0  /* end function */


/*************************************************************/
/* Function:  HTTP_isError                                   */
/*                                                           */
/* Check the input processing codes. Note that if the input  */
/* RexxRC is nonzero, then the toolkit return code is moot   */
/* (the toolkit function was likely not even invoked). If    */
/* the toolkit return code is relevant, check it against the */
/* set of { HWTH_xx } return codes for evidence of error.    */
/* This set is ordered: HWTH_OK < HWTH_WARNING < ...         */
/* with remaining codes indicating error, so we may check    */
/* via single inequality.                                    */
/*                                                           */
/* Returns:  1 if any toolkit error is indicated, 0          */
/* otherwise.                                                */
/*************************************************************/
HTTP_isError:
 RexxRC = arg(1)
 if RexxRC <> 0 then
   return 1
 ToolkitRC = strip(arg(2),'L',0)
 if ToolkitRC == '' then
   return 0
 if ToolkitRC <= HWTH_WARNING then
   return 0
 return 1  /* end function */


/*************************************************************/
/* Function:  HTTP_isWarning                                 */
/*                                                           */
/* Check the input processing codes. Note that if the input  */
/* RexxRC is nonzero, then the toolkit return code is moot   */
/* (the toolkit function was likely not even invoked). If    */
/* the toolkit return code is relevant, check it against the */
/* specific HWTH_WARNING return code.                        */
/*                                                           */
/* Returns:  1 if toolkit rc HWTH_WARNING is indicated, 0    */
/* otherwise.                                                */
/*************************************************************/
HTTP_isWarning:
 RexxRC = arg(1)
 if RexxRC <> 0 then
   return 0
 ToolkitRC = strip(arg(2),'L',0)
 if ToolkitRC == '' then
   return 0
 if ToolkitRC <> HWTH_WARNING then
   return 0
 return 1 /* end function */


/***********************************************/
/* Procedure: HTTP_surfaceDiag()               */
/*                                             */
/* Surface input error information.  Note that */
/* when the RexxRC is nonzero, the ToolkitRC   */
/* and DiagArea content are moot and are       */
/* suppressed (so as to not mislead).          */
/***********************************************/
HTTP_surfaceDiag: procedure expose DiagArea.
 say
 say '*ERROR* ('||arg(1)||') at time: '||Time()
 say 'Rexx RC: '||arg(2)', Toolkit ReturnCode: '||arg(3)
 say 'DiagArea.Service: '||DiagArea.HWTH_service
 say 'DiagArea.ReasonCode: '||DiagArea.HWTH_reasonCode
 say 'DiagArea.ReasonDesc: '||DiagArea.HWTH_reasonDesc
 say
 return /* end procedure */

/***********************************************/
/* Function:  fatalError                       */
/*                                             */
/* Surfaces the input message, and returns     */
/* a canonical failure code.                   */
/*                                             */
/* Returns: -1 to indicate fatal script error. */
/***********************************************/
fatalError:
 errorMsg = arg(1)
 say errorMsg
 return -1  /* end function */
